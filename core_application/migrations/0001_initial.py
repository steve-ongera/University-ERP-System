# Generated by Django 5.2 on 2025-07-28 13:09

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=10, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('author', models.CharField(max_length=200)),
                ('isbn', models.CharField(blank=True, max_length=20)),
                ('resource_type', models.CharField(choices=[('book', 'Book'), ('journal', 'Journal'), ('ebook', 'E-Book'), ('thesis', 'Thesis/Dissertation'), ('reference', 'Reference Material'), ('multimedia', 'Multimedia'), ('database', 'Online Database')], max_length=20)),
                ('publisher', models.CharField(blank=True, max_length=200)),
                ('publication_year', models.IntegerField(blank=True, null=True)),
                ('edition', models.CharField(blank=True, max_length=50)),
                ('total_copies', models.IntegerField(default=1)),
                ('available_copies', models.IntegerField(default=1)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('call_number', models.CharField(max_length=50, unique=True)),
                ('subject_area', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('digital_copy_url', models.URLField(blank=True)),
                ('is_available', models.BooleanField(default=True)),
                ('added_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_/ allowed.', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Username can contain letters, numbers, @, ., +, -, _, and / characters only.', regex='^[\\w.@+\\-/]+$')])),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('student', 'Student'), ('lecturer', 'Lecturer'), ('professor', 'Professor'), ('staff', 'Staff'), ('registrar', 'Registrar'), ('dean', 'Dean'), ('hod', 'Head of Department')], max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.TextField(blank=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bed_position', models.CharField(choices=[('bed_1', 'Bed 1'), ('bed_2', 'Bed 2'), ('bed_3', 'Bed 3'), ('bed_4', 'Bed 4')], max_length=10)),
                ('bed_number', models.CharField(help_text='Unique bed identifier', max_length=20)),
                ('is_available', models.BooleanField(default=True)),
                ('maintenance_status', models.CharField(choices=[('good', 'Good Condition'), ('needs_repair', 'Needs Repair'), ('under_maintenance', 'Under Maintenance'), ('out_of_order', 'Out of Order')], default='good', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hostel_beds', to='core_application.academicyear')),
            ],
            options={
                'ordering': ['room', 'bed_position'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('established_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('head_of_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_departments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', models.CharField(max_length=15, unique=True)),
                ('course_type', models.CharField(choices=[('core', 'Core Course'), ('elective', 'Elective Course'), ('major', 'Major Course'), ('minor', 'Minor Course'), ('general_education', 'General Education'), ('capstone', 'Capstone Project'), ('thesis', 'Thesis'), ('practicum', 'Practicum'), ('internship', 'Internship')], default='core', max_length=20)),
                ('level', models.CharField(choices=[('100', '100 Level (First Year)'), ('200', '200 Level (Second Year)'), ('300', '300 Level (Third Year)'), ('400', '400 Level (Fourth Year)'), ('500', '500 Level (Master)'), ('600', '600 Level (PhD)')], max_length=3)),
                ('credit_hours', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)])),
                ('lecture_hours', models.IntegerField(default=0)),
                ('tutorial_hours', models.IntegerField(default=0)),
                ('practical_hours', models.IntegerField(default=0)),
                ('field_work_hours', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True)),
                ('learning_outcomes', models.TextField(blank=True)),
                ('assessment_methods', models.TextField(blank=True)),
                ('recommended_textbooks', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='prerequisite_for', to='core_application.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core_application.department')),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_repeat', models.BooleanField(default=False)),
                ('is_audit', models.BooleanField(default=False, help_text='Audit course (no grade)')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_application.course')),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('established_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('dean', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_faculties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Faculties',
            },
        ),
        migrations.AddField(
            model_name='department',
            name='faculty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='core_application.faculty'),
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('continuous_assessment', models.DecimalField(blank=True, decimal_places=2, help_text='CAT marks (40%)', max_digits=5, null=True)),
                ('final_exam', models.DecimalField(blank=True, decimal_places=2, help_text='Final exam marks (60%)', max_digits=5, null=True)),
                ('practical_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('project_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade', models.CharField(blank=True, choices=[('A+', 'A+ (90-100)'), ('A', 'A (80-89)'), ('A-', 'A- (75-79)'), ('B+', 'B+ (70-74)'), ('B', 'B (65-69)'), ('B-', 'B- (60-64)'), ('C+', 'C+ (55-59)'), ('C', 'C (50-54)'), ('C-', 'C- (45-49)'), ('D+', 'D+ (40-44)'), ('D', 'D (35-39)'), ('F', 'F (Below 35)'), ('I', 'Incomplete'), ('W', 'Withdrawn'), ('P', 'Pass'), ('NP', 'No Pass')], max_length=2)),
                ('grade_points', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('quality_points', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_passed', models.BooleanField(default=False)),
                ('exam_date', models.DateField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grade', to='core_application.enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='Hostel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hostel_type', models.CharField(choices=[('boys', 'Boys Hostel'), ('girls', 'Girls Hostel')], max_length=10)),
                ('total_rooms', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('description', models.TextField(blank=True)),
                ('facilities', models.TextField(blank=True, help_text='Available facilities like WiFi, laundry, etc.')),
                ('rules_and_regulations', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hostels', to='core_application.department')),
                ('warden', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_hostels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['hostel_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='HostelBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_date', models.DateTimeField(auto_now_add=True)),
                ('check_in_date', models.DateField(blank=True, null=True)),
                ('check_out_date', models.DateField(blank=True, null=True)),
                ('expected_checkout_date', models.DateField(blank=True, null=True)),
                ('booking_status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('checked_in', 'Checked In'), ('checked_out', 'Checked Out')], default='pending', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Payment Pending'), ('partial', 'Partially Paid'), ('paid', 'Fully Paid'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('booking_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('approval_remarks', models.TextField(blank=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hostel_bookings', to='core_application.academicyear')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_bookings', to=settings.AUTH_USER_MODEL)),
                ('bed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='core_application.bed')),
                ('checked_in_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checked_in_students', to=settings.AUTH_USER_MODEL)),
                ('checked_out_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checked_out_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-booking_date'],
            },
        ),
        migrations.CreateModel(
            name='HostelIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_type', models.CharField(choices=[('damage', 'Property Damage'), ('noise', 'Noise Complaint'), ('theft', 'Theft'), ('violence', 'Violence/Fighting'), ('drugs', 'Drug/Alcohol Related'), ('curfew', 'Curfew Violation'), ('cleanliness', 'Cleanliness Issue'), ('other', 'Other')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=10)),
                ('status', models.CharField(choices=[('reported', 'Reported'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('escalated', 'Escalated')], default='reported', max_length=20)),
                ('incident_date', models.DateTimeField()),
                ('description', models.TextField()),
                ('action_taken', models.TextField(blank=True)),
                ('fine_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('fine_paid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidents', to='core_application.hostelbooking')),
                ('handled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_incidents', to=settings.AUTH_USER_MODEL)),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_incidents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-incident_date'],
            },
        ),
        migrations.CreateModel(
            name='HostelPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('mobile_money', 'Mobile Money'), ('cheque', 'Cheque'), ('card', 'Credit/Debit Card')], max_length=20)),
                ('reference_number', models.CharField(blank=True, max_length=50)),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='core_application.hostelbooking')),
                ('received_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_number', models.CharField(max_length=20, unique=True)),
                ('academic_rank', models.CharField(choices=[('professor', 'Professor'), ('associate_professor', 'Associate Professor'), ('senior_lecturer', 'Senior Lecturer'), ('lecturer', 'Lecturer'), ('assistant_lecturer', 'Assistant Lecturer'), ('tutorial_fellow', 'Tutorial Fellow'), ('graduate_assistant', 'Graduate Assistant'), ('visiting_lecturer', 'Visiting Lecturer')], max_length=30)),
                ('employment_type', models.CharField(choices=[('permanent', 'Permanent'), ('contract', 'Contract'), ('part_time', 'Part Time'), ('visiting', 'Visiting'), ('adjunct', 'Adjunct')], default='permanent', max_length=20)),
                ('highest_qualification', models.CharField(max_length=100)),
                ('university_graduated', models.CharField(blank=True, max_length=200)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('research_interests', models.TextField(blank=True)),
                ('publications', models.TextField(blank=True)),
                ('professional_registration', models.CharField(blank=True, max_length=100)),
                ('teaching_experience_years', models.IntegerField(default=0)),
                ('research_experience_years', models.IntegerField(default=0)),
                ('industry_experience_years', models.IntegerField(default=0)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('joining_date', models.DateField()),
                ('contract_end_date', models.DateField(blank=True, null=True)),
                ('office_location', models.CharField(blank=True, max_length=100)),
                ('office_phone', models.CharField(blank=True, max_length=15)),
                ('consultation_hours', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturers', to='core_application.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='lecturer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_application.lecturer'),
        ),
        migrations.CreateModel(
            name='LibraryTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('borrow', 'Borrow'), ('return', 'Return'), ('renew', 'Renew'), ('reserve', 'Reserve')], max_length=10)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('returned', 'Returned'), ('overdue', 'Overdue'), ('lost', 'Lost'), ('damaged', 'Damaged')], default='active', max_length=10)),
                ('fine_amount', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('remarks', models.TextField(blank=True)),
                ('librarian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_transactions', to=settings.AUTH_USER_MODEL)),
                ('library_resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core_application.library')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('academic', 'Academic'), ('fee', 'Fee Related'), ('exam', 'Examination'), ('general', 'General'), ('emergency', 'Emergency'), ('event', 'Event')], max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('send_email', models.BooleanField(default=False)),
                ('send_sms', models.BooleanField(default=False)),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('recipients', models.ManyToManyField(related_name='received_notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', models.CharField(max_length=15, unique=True)),
                ('programme_type', models.CharField(choices=[('bachelor', 'Bachelor Degree'), ('master', 'Master Degree'), ('phd', 'PhD'), ('diploma', 'Diploma'), ('certificate', 'Certificate'), ('postgraduate_diploma', 'Postgraduate Diploma')], max_length=25)),
                ('study_mode', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('distance_learning', 'Distance Learning'), ('online', 'Online'), ('evening', 'Evening'), ('weekend', 'Weekend')], default='full_time', max_length=20)),
                ('duration_years', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('semesters_per_year', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(3)])),
                ('total_semesters', models.IntegerField(validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(24)])),
                ('credit_hours_required', models.IntegerField(validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(300)])),
                ('description', models.TextField(blank=True)),
                ('entry_requirements', models.TextField()),
                ('career_prospects', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programmes', to='core_application.department')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programmes', to='core_application.faculty')),
            ],
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('tuition_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('examination_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('library_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('laboratory_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('fieldwork_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('technology_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('accommodation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('meals_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('medical_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('insurance_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('student_union_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('sports_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('graduation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('other_fees', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('government_subsidy', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('scholarship_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core_application.academicyear')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core_application.programme')),
            ],
            options={
                'unique_together': {('programme', 'academic_year', 'year', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=10)),
                ('floor', models.IntegerField(help_text='Floor number (0 for ground floor)', validators=[django.core.validators.MinValueValidator(0)])),
                ('capacity', models.IntegerField(default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('description', models.TextField(blank=True)),
                ('facilities', models.TextField(blank=True, help_text='Room-specific facilities')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('hostel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='core_application.hostel')),
            ],
            options={
                'ordering': ['hostel', 'floor', 'room_number'],
                'unique_together': {('hostel', 'room_number')},
            },
        ),
        migrations.AddField(
            model_name='bed',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beds', to='core_application.room'),
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('registration_start_date', models.DateField()),
                ('registration_end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='core_application.academicyear')),
            ],
            options={
                'ordering': ['academic_year', 'semester_number'],
                'unique_together': {('academic_year', 'semester_number')},
            },
        ),
        migrations.CreateModel(
            name='Examination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('cat', 'Continuous Assessment Test'), ('mid_semester', 'Mid-Semester Exam'), ('final', 'Final Examination'), ('supplementary', 'Supplementary Exam'), ('special', 'Special Examination')], max_length=20)),
                ('exam_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('duration_minutes', models.IntegerField()),
                ('venue', models.CharField(max_length=100)),
                ('max_marks', models.IntegerField(default=100)),
                ('instructions', models.TextField(blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examinations', to='core_application.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_exams', to=settings.AUTH_USER_MODEL)),
                ('invigilators', models.ManyToManyField(blank=True, related_name='invigilated_exams', to='core_application.lecturer')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examinations', to='core_application.semester')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_application.semester'),
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_number', models.CharField(max_length=20, unique=True)),
                ('staff_category', models.CharField(choices=[('administrative', 'Administrative'), ('technical', 'Technical Support'), ('library', 'Library Staff'), ('laboratory', 'Laboratory Technician'), ('it_support', 'IT Support'), ('maintenance', 'Maintenance'), ('security', 'Security'), ('catering', 'Catering'), ('transport', 'Transport'), ('medical', 'Medical Staff'), ('counselling', 'Counselling')], max_length=20)),
                ('designation', models.CharField(max_length=100)),
                ('job_description', models.TextField(blank=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('joining_date', models.DateField()),
                ('office_location', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_application.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(help_text='University student ID number', max_length=20, unique=True)),
                ('current_year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('current_semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('admission_date', models.DateField()),
                ('admission_type', models.CharField(choices=[('direct', 'Direct Entry'), ('mature', 'Mature Entry'), ('transfer', 'Transfer'), ('international', 'International'), ('exchange', 'Exchange Student')], default='direct', max_length=20)),
                ('sponsor_type', models.CharField(choices=[('government', 'Government Sponsored'), ('self', 'Self Sponsored'), ('employer', 'Employer Sponsored'), ('scholarship', 'Scholarship'), ('bursary', 'Bursary'), ('loan', 'Student Loan')], default='government', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('deferred', 'Deferred'), ('suspended', 'Suspended'), ('discontinued', 'Discontinued'), ('expelled', 'Expelled'), ('on_leave', 'On Academic Leave')], default='active', max_length=20)),
                ('entry_qualification', models.CharField(help_text='e.g., KCSE, A-Level, Diploma', max_length=100)),
                ('entry_points', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_graduation_date', models.DateField(blank=True, null=True)),
                ('cumulative_gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('total_credit_hours', models.IntegerField(default=0)),
                ('guardian_name', models.CharField(max_length=100)),
                ('guardian_phone', models.CharField(max_length=15)),
                ('guardian_relationship', models.CharField(max_length=50)),
                ('guardian_address', models.TextField()),
                ('emergency_contact', models.CharField(max_length=15)),
                ('blood_group', models.CharField(blank=True, max_length=5)),
                ('medical_conditions', models.TextField(blank=True)),
                ('accommodation_type', models.CharField(blank=True, help_text='On-campus/Off-campus', max_length=50)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core_application.programme')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Research',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('research_type', models.CharField(choices=[('undergraduate', 'Undergraduate Research'), ('masters', 'Masters Thesis'), ('phd', 'PhD Dissertation'), ('faculty', 'Faculty Research'), ('collaborative', 'Collaborative Research'), ('funded', 'Funded Research Project')], max_length=20)),
                ('start_date', models.DateField()),
                ('expected_end_date', models.DateField()),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('proposal', 'Proposal Stage'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('published', 'Published'), ('suspended', 'Suspended'), ('cancelled', 'Cancelled')], default='proposal', max_length=20)),
                ('abstract', models.TextField()),
                ('keywords', models.CharField(blank=True, max_length=500)),
                ('funding_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('funding_source', models.CharField(blank=True, max_length=200)),
                ('ethics_approval', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('co_investigators', models.ManyToManyField(blank=True, related_name='collaborated_research', to='core_application.lecturer')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='research_projects', to='core_application.department')),
                ('principal_investigator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_research', to='core_application.lecturer')),
                ('students', models.ManyToManyField(blank=True, related_name='research_projects', to='core_application.student')),
            ],
        ),
        migrations.AddField(
            model_name='hostelbooking',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hostel_bookings', to='core_application.student'),
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque'), ('bankers_cheque', 'Bankers Cheque'), ('online', 'Online Payment'), ('card', 'Credit/Debit Card')], max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed'), ('refunded', 'Refunded'), ('partial', 'Partial Payment')], default='pending', max_length=20)),
                ('transaction_reference', models.CharField(blank=True, max_length=100)),
                ('mpesa_receipt', models.CharField(blank=True, max_length=50)),
                ('bank_slip_number', models.CharField(blank=True, max_length=50)),
                ('remarks', models.TextField(blank=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('fee_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='core_application.feestructure')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='core_application.student')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_application.student'),
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('venue', models.CharField(max_length=100)),
                ('class_type', models.CharField(choices=[('lecture', 'Lecture'), ('tutorial', 'Tutorial'), ('practical', 'Practical'), ('seminar', 'Seminar'), ('fieldwork', 'Field Work')], default='lecture', max_length=15)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('semester_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('is_active', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_slots', to='core_application.course')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_slots', to='core_application.lecturer')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_slots', to='core_application.programme')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_slots', to='core_application.semester')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('course', 'lecturer', 'semester', 'day_of_week', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='ProgrammeCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('is_mandatory', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_programmes', to='core_application.course')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programme_courses', to='core_application.programme')),
            ],
            options={
                'ordering': ['year', 'semester', 'course__name'],
                'unique_together': {('programme', 'course', 'year', 'semester')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='bed',
            unique_together={('room', 'academic_year', 'bed_position')},
        ),
        migrations.AlterUniqueTogether(
            name='hostelbooking',
            unique_together={('student', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'course', 'semester')},
        ),
        migrations.CreateModel(
            name='StudentReporting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporting_type', models.CharField(choices=[('online', 'Online Reporting'), ('physical', 'Physical Reporting')], default='online', max_length=10)),
                ('reporting_date', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('processed_date', models.DateTimeField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_application.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_application.student')),
            ],
            options={
                'ordering': ['-reporting_date'],
                'unique_together': {('student', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused Absence')], default='present', max_length=10)),
                ('remarks', models.CharField(blank=True, max_length=200)),
                ('marked_at', models.DateTimeField(auto_now_add=True)),
                ('marked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marked_attendance', to='core_application.lecturer')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='core_application.student')),
                ('timetable_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='core_application.timetable')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('student', 'timetable_slot', 'date')},
            },
        ),
    ]
