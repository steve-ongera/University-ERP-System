# Generated by Django 5.2.4 on 2025-08-02 10:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core_application', '0005_commonquestion_quicklink_studentcomment'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('assignment_type', models.CharField(choices=[('individual', 'Individual Assignment'), ('group', 'Group Assignment'), ('project', 'Project'), ('essay', 'Essay'), ('report', 'Report'), ('case_study', 'Case Study'), ('presentation', 'Presentation'), ('practical', 'Practical Work')], default='individual', max_length=20)),
                ('description', models.TextField()),
                ('instructions', models.TextField(blank=True, help_text='Detailed instructions for students')),
                ('assignment_file', models.FileField(blank=True, help_text='Assignment question paper or additional materials', null=True, upload_to='assignments/')),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('late_submission_allowed', models.BooleanField(default=False)),
                ('late_submission_penalty', models.CharField(blank=True, help_text='e.g., 10% deduction per day', max_length=200)),
                ('max_file_size_mb', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('submission_format', models.CharField(choices=[('pdf', 'PDF Only'), ('doc', 'Word Document'), ('any', 'Any Format'), ('code', 'Code Files'), ('presentation', 'Presentation File')], default='pdf', max_length=20)),
                ('max_pages', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('min_words', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_words', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('total_marks', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('weight_percentage', models.DecimalField(decimal_places=2, help_text='Weight towards final grade (e.g., 15.00 for 15%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False, help_text='Make visible to students')),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('is_urgent', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='core_application.assignment')),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='LecturerCourseAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('lecture_venue', models.CharField(blank=True, help_text='Default lecture hall/venue', max_length=100)),
                ('lecture_time', models.CharField(blank=True, help_text='e.g., Mon 8-10am, Wed 2-4pm', max_length=100)),
                ('remarks', models.TextField(blank=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer_assignments', to='core_application.academicyear')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='Admin/HOD who assigned the course', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_courses', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer_assignments', to='core_application.course')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_assignments', to='core_application.lecturer')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer_assignments', to='core_application.semester')),
            ],
            options={
                'ordering': ['academic_year', 'semester', 'course__name'],
                'unique_together': {('lecturer', 'course', 'academic_year', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='CourseNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('note_type', models.CharField(choices=[('lecture', 'Lecture Notes'), ('tutorial', 'Tutorial Notes'), ('handout', 'Handout'), ('reference', 'Reference Material'), ('supplementary', 'Supplementary Material'), ('revision', 'Revision Notes')], default='lecture', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('notes_file', models.FileField(help_text='Upload PDF, DOC, PPTX or other document formats', upload_to='course_notes/')),
                ('file_size', models.IntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('week_number', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('topic', models.CharField(blank=True, max_length=200)),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True, help_text='Visible to all enrolled students')),
                ('download_count', models.IntegerField(default=0)),
                ('lecturer_assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_notes', to='core_application.lecturercourseassignment')),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.AddField(
            model_name='assignment',
            name='lecturer_assignment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='core_application.lecturercourseassignment'),
        ),
        migrations.CreateModel(
            name='NotesDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downloaded_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('course_notes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='core_application.coursenotes')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes_downloads', to='core_application.student')),
            ],
            options={
                'ordering': ['-downloaded_date'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_file', models.FileField(upload_to='assignment_submissions/')),
                ('original_filename', models.CharField(blank=True, max_length=255)),
                ('file_size', models.IntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('submitted_date', models.DateTimeField(blank=True, null=True)),
                ('last_modified_date', models.DateTimeField(auto_now=True)),
                ('submission_status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('late', 'Late Submission'), ('resubmitted', 'Resubmitted')], default='draft', max_length=20)),
                ('is_submitted', models.BooleanField(default=False)),
                ('is_late', models.BooleanField(default=False)),
                ('student_comments', models.TextField(blank=True, help_text='Optional comments from student')),
                ('marks_obtained', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('percentage_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grading_status', models.CharField(choices=[('pending', 'Pending Grading'), ('graded', 'Graded'), ('returned', 'Returned with Feedback')], default='pending', max_length=20)),
                ('graded_date', models.DateTimeField(blank=True, null=True)),
                ('lecturer_feedback', models.TextField(blank=True)),
                ('feedback_file', models.FileField(blank=True, help_text='Optional feedback file from lecturer', null=True, upload_to='assignment_feedback/')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='core_application.assignment')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_submissions', to='core_application.student')),
            ],
            options={
                'ordering': ['-submitted_date'],
                'unique_together': {('assignment', 'student')},
            },
        ),
    ]
